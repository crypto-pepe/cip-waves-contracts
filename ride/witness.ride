{-# STDLIB_VERSION 6 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

let SEPARATOR = "__"
let ARGS_SEPARATOR = "####" # ATTENTION -> must not have such a combination in args
let KEY_INIT = "INIT"
let KEY_MULTISIG = "MULTISIG"
let KEY_STATUS = "STATUS"
let KEY_PROXY_SEC_DEPO = "PROXY_SECURITY_DEPOSIT"
let KEY_PROXY_SEC_DEPO_PER_EVENT = "PROXY_SECURITY_DEPOSIT_PER_EVENT"
let KEY_WAVES_EVENT = "WAVES_EVENT"
let KEY_EVM_EVENT = "EVM_EVENT"
let KEY_WAVES_EVENT_SIZE = "WAVES_EVENT_SIZE"
let KEY_EVM_EVENT_SIZE = "EVM_EVENT_SIZE"
let KEY_WAVES_EVENT_STATUS = "WAVES_EVENT_STATUS"
let KEY_EVM_EVENT_STATUS = "EVM_EVENT_STATUS"
let KEY_WAVES_EVENT_PUBLISHED = "WAVES_EVENT_PUBLISHED"
let KEY_EVM_EVENT_PUBLISHED = "EVM_EVENT_PUBLISHED"
let KEY_CURRENT_EPOCH = "CURRENT_EPOCH"
let KEY_SIZE = "SIZE"
let KEY_WAVES_EVENT_CALLER = "WAVES_EVENT_CALLER"
let KEY_EVM_EVENT_CALLER = "EVM_EVENT_CALLER"
let KEY_WITNESSES_PER_EPOCH = "WITNESSES_PER_EPOCH"
let KEY_WAVES_EVENT_EXECUTOR = "WAVES_EVENT_EXECUTOR"
let KEY_EVM_EVENT_EXECUTOR = "EVM_EVENT_EXECUTOR"
let KEY_REWARD_TOKEN_ADDRESS = "REWARD_TOKEN_ADDRESS"
let KEY_REWARD_AMOUNT = "REWARD_AMOUNT"

let FUNC_MINT_MANY = "mintMany"

let EVENT_STATUS_PROCESSING = 1
let EVENT_STATUS_CONFIRMED = 2
let EVENT_STATUS_REJECTED = 3

let MAX_INT = 9223372036854775807

# ---------- Validation functions ----------

func _validateAddress(address_: String, err_: String) = {
    match addressFromString(address_) {
        case a:Address => true
        case _ => throw(err_)
    }
}

func _validateAsset(assetId_: String, err_: String) = {
    match assetInfo(fromBase58String(assetId_)) {
        case a:Asset => true
        case _ => throw(err_)
    }
}

func _validateInt(val_: Int, lowerBoundary_: Int, upperBoundary_: Int, err_: String) = {
    if val_ < lowerBoundary_ || val_ > upperBoundary_ then
        throw(err_)
    else true
}

func _validateString(val_: String, err_: String) = {
    if val_.size() <= 0 || val_.contains(SEPARATOR) then
        throw(err_)
    else true
}

func _validateArgString(val_: String, err_: String) = {
    if val_.contains(ARGS_SEPARATOR) then
        throw(err_)
    else _validateString(val_, err_)
}

func _validateArgs(args_: List[String], err_: String) = {
    if args_.size() > 22 then
        throw(err_)
    else 
        func foldFunc(acc: (Boolean, String), elem: String) = {
            (acc._1 && _validateArgString(elem, acc._2), acc._2)
        }

        let result = FOLD<22>(args_, (true, err_), foldFunc)
        result._1
}

func _validatePaymentsSize(payments_: List[AttachedPayment], target_: Int, err_: String) = {
    if payments_.size() != target_ then
        throw(err_)
    else true
}

func _validatePaymentAsset(payment_: AttachedPayment, asset_: ByteVector|Unit, err_: String) = {
    if payment_.assetId != asset_ then
        throw(err_)
    else true
}

func _validateEventIdx(val_: Int, max_: Int, err_: String) = {
    if val_ < 0 || val_ >= max_ then
        throw(err_)
    else true
}

func _validateEventStatus(val_: Int, err_: String) = {
    if val_ < EVENT_STATUS_PROCESSING || val_ > EVENT_STATUS_REJECTED then
        throw(err_)
    else true
}

func _validatePublicKey(publicKey_: String, err_: String) = {
    if publicKey_.fromBase58String().size() != 32 then
        throw(err_)
    else true
}

func _validatePublicKeys(publicKeys_: List[String], err_: String) = {
    func foldFunc(acc: (Boolean, String), elem: String) = {
        (acc._1 && _validatePublicKey(elem, acc._2), acc._2)
    }

    let result = FOLD<10>(publicKeys_, (true, err_), foldFunc)
    result._1
}

# ---------- Converting functions ----------

func _publicKeysToAddrsStr(publicKeys_: List[String]) = {
    func foldfunc(acc_: List[String], elem_: String) = {
        acc_ :+ elem_.fromBase58String().addressFromPublicKey().toString()
    }

    FOLD<51>(publicKeys_, [], foldfunc)
}

# ---------- Data structures functions ----------

func _loadInit() = {
    match getBoolean(KEY_INIT) {
        case a:Boolean => a
        case _ => false
    }
}

func _saveInit(isInit_: Boolean) = {
    [BooleanEntry(KEY_INIT, isInit_)]
}

func _loadMultisig() = {
    match getString(KEY_MULTISIG) {
        case a:String => addressFromStringValue(a)
        case _ => Address(base58'')
    }
}

func _saveMultisig(multisig_: Address) = {
    [StringEntry(KEY_MULTISIG, multisig_.toString())]
}

func _loadProxySecDepo(account_: Address) = {
    match getInteger(makeString([KEY_PROXY_SEC_DEPO, account_.toString()], SEPARATOR)) {
        case a:Int => a
        case _ => 0
    }
}

func _saveProxySecDepo(account_: Address, val_: Int) = {
    [IntegerEntry(
        makeString([KEY_PROXY_SEC_DEPO, account_.toString()], SEPARATOR),
        val_
    )]
}

func _loadProxySecDepoPerEvent() = {
    match getInteger(KEY_PROXY_SEC_DEPO_PER_EVENT) {
        case a:Int => a
        case _ => 0
    }
}

func _saveProxySecDepoPerEvent(val_: Int) = {
    [IntegerEntry(KEY_PROXY_SEC_DEPO_PER_EVENT, val_)]
}

func _loadWavesEventSize() = {
    match getInteger(KEY_WAVES_EVENT_SIZE) {
        case a:Int => a
        case _ => 0
    }
}

func _saveWavesEventSize(val_: Int) = {
    [IntegerEntry(KEY_WAVES_EVENT_SIZE, val_)]
}

func _loadEVMEventSize() = {
    match getInteger(KEY_EVM_EVENT_SIZE) {
        case a:Int => a
        case _ => 0
    }
}

func _saveEVMEventSize(val_: Int) = {
    [IntegerEntry(KEY_EVM_EVENT_SIZE, val_)]
}

func _loadWavesEvent(index_: Int) = {
    match getString(makeString([KEY_WAVES_EVENT, index_.toString()], SEPARATOR)) {
        case a:String =>
            let struct = a.split(SEPARATOR)
            (
                struct[0].parseIntValue(),          # callerChainId_
                struct[1].parseIntValue(),          # executionChainId_
                struct[2].parseIntValue(),          # nonce_
                struct[3],                          # executionContract_
                struct[4],                          # functionName_
                struct[5].split(ARGS_SEPARATOR),    # args_
                struct[6],                          # txHash_
                struct[7].parseIntValue(),          # blockNumber_
                struct[8],                          # eventHash_
                struct[9].parseIntValue(),          # confirmations_
                struct[10].parseIntValue(),         # total_
                struct[11].parseIntValue(),         # proxy_sec_depo
                struct[12].addressFromStringValue() # proxy_address
            )
        case _ => (0, 0, 0, "", "", [], "", 0, "", 0, 0, 0, Address(base58''))
    }
}

func _saveWavesEvent(index_: Int, event_: (Int, Int, Int, String, String, List[String], String, Int, String, Int, Int, Int, Address)) = {
    [StringEntry(
        makeString([KEY_WAVES_EVENT, index_.toString()], SEPARATOR),
        makeString([
            event_._1.toString(),                   # callerChainId_
            event_._2.toString(),                   # executionChainId_
            event_._3.toString(),                   # nonce_
            event_._4,                              # executionContract_
            event_._5,                              # functionName_
            makeString(event_._6, ARGS_SEPARATOR),  # args_
            event_._7,                              # txHash_
            event_._8.toString(),                   # blockNumber_
            event_._9,                              # eventHash_
            event_._10.toString(),                  # confirmations_
            event_._11.toString(),                  # total_
            event_._12.toString(),                  # proxy_sec_depo
            event_._13.toString()                   # proxy_address
        ], SEPARATOR)
    )]
}

func _loadEVMEvent(index_: Int) = {
    match getString(makeString([KEY_EVM_EVENT, index_.toString()], SEPARATOR)) {
        case a:String =>
            let struct = a.split(SEPARATOR)
            (
                struct[0].parseIntValue(),          # callerChainId_
                struct[1].parseIntValue(),          # executionChainId_
                struct[2].parseIntValue(),          # nonce_
                struct[3],                          # executionContract_
                struct[4],                          # calldata_
                struct[5],                          # txHash_
                struct[6].parseIntValue(),          # blockNumber_
                struct[7],                          # eventHash_
                struct[8].parseIntValue(),          # confirmations_
                struct[9].parseIntValue(),          # total_
                struct[10].parseIntValue(),         # proxy_sec_depo
                struct[11].addressFromStringValue() # proxy_address
            )
        case _ => (0, 0, 0, "", "", "", 0, "", 0, 0, 0, Address(base58''))
    }
}

func _saveEVMEvent(index_: Int, event_: (Int, Int, Int, String, String, String, Int, String, Int, Int, Int, Address)) = {
    [StringEntry(
        makeString([KEY_EVM_EVENT, index_.toString()], SEPARATOR),
        makeString([
            event_._1.toString(),                   # callerChainId_
            event_._2.toString(),                   # executionChainId_
            event_._3.toString(),                   # nonce_
            event_._4,                              # executionContract_
            event_._5,                              # calldata_
            event_._6,                              # txHash_
            event_._7.toString(),                   # blockNumber_
            event_._8,                              # eventHash_
            event_._9.toString(),                   # confirmations_
            event_._10.toString(),                  # total_
            event_._11.toString(),                  # proxy_sec_depo
            event_._12.toString()                   # proxy_address
        ], SEPARATOR)
    )]
}

func _loadWavesEventStatus(eventHash_: String) = {
    match getInteger(makeString([KEY_WAVES_EVENT_STATUS, eventHash_], SEPARATOR)) {
        case a:Int => a
        case _ => 0
    }
}

func _saveWavesEventStatus(eventHash_: String, status_: Int) = {
    [IntegerEntry(
        makeString([KEY_WAVES_EVENT_STATUS, eventHash_], SEPARATOR),
        status_
    )]
}

func _loadEVMEventStatus(eventHash_: String) = {
    match getInteger(makeString([KEY_EVM_EVENT_STATUS, eventHash_], SEPARATOR)) {
        case a:Int => a
        case _ => 0
    }
}

func _saveEVMEventStatus(eventHash_: String, status_: Int) = {
    [IntegerEntry(
        makeString([KEY_EVM_EVENT_STATUS, eventHash_], SEPARATOR),
        status_
    )]
}

func _loadPublishedWavesEventByWitness(publicKey_: String, eventId_: Int) = {
    match getInteger(makeString([KEY_WAVES_EVENT_PUBLISHED, publicKey_, eventId_.toString()], SEPARATOR)) {
        case a:Int => a
        case _ => 0
    }
}

func _savePublishedWavesEventByWitness(publicKey_: String, eventId_: Int, val_: Int) = {
    [IntegerEntry(
        makeString([KEY_WAVES_EVENT_PUBLISHED, publicKey_, eventId_.toString()], SEPARATOR),
        val_
    )]
}

func _loadPublishedEVMEventByWitness(publicKey_: String, eventId_: Int) = {
    match getInteger(makeString([KEY_EVM_EVENT_PUBLISHED, publicKey_, eventId_.toString()], SEPARATOR)) {
        case a:Int => a
        case _ => 0
    }
}

func _savePublishedEVMEventByWitness(publicKey_: String, eventId_: Int, val_: Int) = {
    [IntegerEntry(
        makeString([KEY_EVM_EVENT_PUBLISHED, publicKey_, eventId_.toString()], SEPARATOR),
        val_
    )]
}

func _loadCurrentEpoch(callerChainId_: Int) = {
    match getInteger(makeString([KEY_CURRENT_EPOCH, callerChainId_.toString()], SEPARATOR)) {
        case a:Int => a
        case _ => 0
    }
}

func _saveCurrentEpoch(callerChainId_: Int, val_: Int) = {
    [IntegerEntry(makeString([KEY_CURRENT_EPOCH, callerChainId_.toString()], SEPARATOR), val_)]
}

func _loadWavesEventCallerIdxSize(callerChainId_: Int) = {
    match getInteger(makeString([KEY_WAVES_EVENT_CALLER, callerChainId_.toString(), KEY_SIZE], SEPARATOR)) {
        case a:Int => a
        case _ => 0
    }
}

func _saveWavesEventCallerIdxSize(callerChainId_: Int, val_: Int) = {
    [IntegerEntry(makeString([KEY_WAVES_EVENT_CALLER, callerChainId_.toString(), KEY_SIZE], SEPARATOR), val_)] 
}

func _loadWavesEventCallerIdx(callerChainId_: Int, idx_: Int) = {
    match getInteger(makeString([KEY_WAVES_EVENT_CALLER, callerChainId_.toString(), idx_.toString()], SEPARATOR)) {
        case a:Int => a
        case _ => 0
    }
}

func _saveWavesEventCallerIdx(callerChainId_: Int, idx_: Int, val_: Int) = {
    [IntegerEntry(makeString([KEY_WAVES_EVENT_CALLER, callerChainId_.toString(), idx_.toString()], SEPARATOR), val_)]
}

func _loadEVMEventCallerIdxSize(callerChainId_: Int) = {
    match getInteger(makeString([KEY_EVM_EVENT_CALLER, callerChainId_.toString(), KEY_SIZE], SEPARATOR)) {
        case a:Int => a
        case _ => 0
    }
}

func _saveEVMEventCallerIdxSize(callerChainId_: Int, val_: Int) = {
    [IntegerEntry(makeString([KEY_EVM_EVENT_CALLER, callerChainId_.toString(), KEY_SIZE], SEPARATOR), val_)] 
}

func _loadEVMEventCallerIdx(callerChainId_: Int, idx_: Int) = {
    match getInteger(makeString([KEY_EVM_EVENT_CALLER, callerChainId_.toString(), idx_.toString()], SEPARATOR)) {
        case a:Int => a
        case _ => 0
    }
}

func _saveEVMEventCallerIdx(callerChainId_: Int, idx_: Int, val_: Int) = {
    [IntegerEntry(makeString([KEY_EVM_EVENT_CALLER, callerChainId_.toString(), idx_.toString()], SEPARATOR), val_)]
}

func _loadWavesEventExecutorIdxSize(executionChainId_: Int) = {
    match getInteger(makeString([KEY_WAVES_EVENT_EXECUTOR, executionChainId_.toString(), KEY_SIZE], SEPARATOR)) {
        case a:Int => a
        case _ => 0
    }
}

func _saveWavesEventExecutorIdxSize(executionChainId_: Int, val_: Int) = {
    [IntegerEntry(makeString([KEY_WAVES_EVENT_EXECUTOR, executionChainId_.toString(), KEY_SIZE], SEPARATOR), val_)] 
}

func _loadWavesEventExecutorIdx(executionChainId_: Int, idx_: Int) = {
    match getInteger(makeString([KEY_WAVES_EVENT_EXECUTOR, executionChainId_.toString(), idx_.toString()], SEPARATOR)) {
        case a:Int => a
        case _ => 0
    }
}

func _saveWavesEventExecutorIdx(executionChainId_: Int, idx_: Int, val_: Int) = {
    [IntegerEntry(makeString([KEY_WAVES_EVENT_EXECUTOR, executionChainId_.toString(), idx_.toString()], SEPARATOR), val_)]
}

func _loadEVMEventExecutorIdxSize(executionChainId_: Int) = {
    match getInteger(makeString([KEY_EVM_EVENT_EXECUTOR, executionChainId_.toString(), KEY_SIZE], SEPARATOR)) {
        case a:Int => a
        case _ => 0
    }
}

func _saveEVMEventExecutorIdxSize(executionChainId_: Int, val_: Int) = {
    [IntegerEntry(makeString([KEY_EVM_EVENT_EXECUTOR, executionChainId_.toString(), KEY_SIZE], SEPARATOR), val_)] 
}

func _loadEVMEventExecutorIdx(executionChainId_: Int, idx_: Int) = {
    match getInteger(makeString([KEY_EVM_EVENT_EXECUTOR, executionChainId_.toString(), idx_.toString()], SEPARATOR)) {
        case a:Int => a
        case _ => 0
    }
}

func _saveEVMEventExecutorIdx(executionChainId_: Int, idx_: Int, val_: Int) = {
    [IntegerEntry(makeString([KEY_EVM_EVENT_EXECUTOR, executionChainId_.toString(), idx_.toString()], SEPARATOR), val_)]
}

func _loadWitnesses(callerChainId_: Int, epoch_: Int) = {
    match getString(
        makeString([KEY_WITNESSES_PER_EPOCH, callerChainId_.toString(), epoch_.toString()], SEPARATOR)
    ) {
        case a:String => if a.size() > 0 then a.split(SEPARATOR) else []
        case _ => []
    }
}

func _saveWitnesses(callerChainId_: Int, epoch_: Int, witnesses_: List[String]) = {
    [StringEntry(
        makeString([KEY_WITNESSES_PER_EPOCH, callerChainId_.toString(), epoch_.toString()], SEPARATOR), 
        makeString(witnesses_, SEPARATOR)
    )]
}

func _loadRewardTokenAddress() = {
    match getString(KEY_REWARD_TOKEN_ADDRESS) {
        case a:String => addressFromStringValue(a)
        case _ => Address(base58'')
    }
}

func _saveRewardTokenAddress(val_: Address) = {
    [StringEntry(KEY_REWARD_TOKEN_ADDRESS, val_.toString())]
}

func _loadRewardAmount() = {
    match getInteger(KEY_REWARD_AMOUNT) {
        case a:Int => a
        case _ => 0
    }
}

func _saveRewardAmount(val_: Int) = {
    [IntegerEntry(KEY_REWARD_AMOUNT, val_)]
}

# ---------- Ownable functions ----------

func _onlyThisContract(caller_: Address) = {
    if caller_ != this then
        throw("_onlyThisContract: revert")
    else true
}

func _whenMultisigSet() = {
    if _loadMultisig() == Address(base58'') then
        throw("_whenMultisigSet: revert")
    else true
}

# ---------- Initializable functions ----------

func _whenNotInitialized() = {
    if _loadInit() then
        throw("_whenNotInitialized: revert")
    else true
}

func _whenInitialized() = {
    if !_loadInit() then
        throw("_whenInitialized: revert")
    else true
}

# ---------- Witness modifiers ----------

func _isActiveWitness(publicKey_: String, publicKeys_: List[String], err_: String) = {
    if !publicKeys_.containsElement(publicKey_) then
       throw(err_)
    else true
}

func _notConfirmedWavesEvent(eventHash_: String, err_: String) = {
    if _loadWavesEventStatus(eventHash_) > EVENT_STATUS_PROCESSING then
        throw(err_)
    else true
}

func _notConfirmedEVMEvent(eventHash_: String, err_: String) = {
    if _loadEVMEventStatus(eventHash_) > EVENT_STATUS_PROCESSING then
        throw(err_)
    else true
}

func _wavesEventNotExist(eventHash_: String, err_: String) = {
    if _loadWavesEventStatus(eventHash_) != 0 then
        throw(err_)
    else true
}

func _evmEventNotExist(eventHash_: String, err_: String) = {
    if _loadEVMEventStatus(eventHash_) != 0 then
        throw(err_)
    else true
}

func _notPublishedWavesEventByWitness(publicKey_: String, eventId_: Int, err_: String) = { 
    if _loadPublishedWavesEventByWitness(publicKey_, eventId_) != 0 then
        throw(err_)
    else true
}

func _notPublishedEVMEventByWitness(publicKey_: String, eventId_: Int, err_: String) = { 
    if _loadPublishedEVMEventByWitness(publicKey_, eventId_) > 0 then
        throw(err_)
    else true
}

func _isQuorumReached(confirmations_: Int, total_: Int, witnessSize_: Int) = {
    if confirmations_ > witnessSize_ / 2 ||
        total_ - confirmations_ > witnessSize_ / 2
    then true
    else false
}

func _getEventStatus(confirmations_: Int, total_: Int, witnessSize_: Int) = {
    if confirmations_ > witnessSize_ / 2 then
        EVENT_STATUS_CONFIRMED
    else if total_ - confirmations_ > witnessSize_ / 2 then
        EVENT_STATUS_REJECTED
    else EVENT_STATUS_PROCESSING
}

# ---------- Hashing functions ----------

func _calcWavesEventHash(event_: (Int, Int, Int, String, String, List[String], String, Int, String, Int, Int, Int, Address)) = {
    let eventBytes =
        event_._1.toBytes() +
        event_._2.toBytes() +
        event_._3.toBytes() +
        event_._4.toBytes() +
        event_._5.toBytes() +
        makeString(event_._6, ARGS_SEPARATOR).toBytes() +
        event_._7.toBytes() + 
        event_._8.toBytes()

    keccak256_16Kb(eventBytes).toBase58String()
}

func _calcEVMEventHash(event_: (Int, Int, Int, String, String, String, Int, String, Int, Int, Int, Address)) = {
    let eventBytes =
        event_._1.toBytes() +
        event_._2.toBytes() +
        event_._3.toBytes() +
        event_._4.toBytes() +
        event_._5.toBytes() +
        event_._6.toBytes() + 
        event_._7.toBytes()

    keccak256_16Kb(eventBytes).toBase58String()
}

# ---------- Utils functions ----------

func _setWavesEventHash(event_: (Int, Int, Int, String, String, List[String], String, Int, String, Int, Int, Int, Address), hash_: String) = {
    (
        event_._1,
        event_._2,
        event_._3,
        event_._4,
        event_._5,
        event_._6,
        event_._7,
        event_._8,
        hash_,
        event_._10,
        event_._11,
        event_._12,
        event_._13
    )
}

func _setEVMEventHash(event_: (Int, Int, Int, String, String, String, Int, String, Int, Int, Int, Address), hash_: String) = {
    (
        event_._1,
        event_._2,
        event_._3,
        event_._4,
        event_._5,
        event_._6,
        event_._7,
        hash_,
        event_._9,
        event_._10,
        event_._11,
        event_._12
    )
}

func _setWavesEventConfirmations(event_: (Int, Int, Int, String, String, List[String], String, Int, String, Int, Int, Int, Address), confirmations_: Int, total_: Int) = {
    (
        event_._1,
        event_._2,
        event_._3,
        event_._4,
        event_._5,
        event_._6,
        event_._7,
        event_._8,
        event_._9,
        confirmations_,
        total_,
        event_._12,
        event_._13
    )
}

func _setEVMEventConfirmations(event_: (Int, Int, Int, String, String, String, Int, String, Int, Int, Int, Address), confirmations_: Int, total_: Int) = {
    (
        event_._1,
        event_._2,
        event_._3,
        event_._4,
        event_._5,
        event_._6,
        event_._7,
        event_._8,
        confirmations_,
        total_,
        event_._11,
        event_._12
    )
}

# ---------- Public callable functions ----------

@Callable(i)
func init(proxySecDepoPerEvent_: Int, rewardTokenAddress_: String, rewardAmount_: Int) = {
    strict err =
        _onlyThisContract(i.caller) &&
        _whenNotInitialized() &&
        _whenMultisigSet() &&
        _validateInt(proxySecDepoPerEvent_, 0, MAX_INT, "init: invalid proxySecDepoPerEvent") &&
        _validateAddress(rewardTokenAddress_, "init: invalid rewardTokenAddress") &&
        _validateInt(rewardAmount_, 0, MAX_INT, "init: invalid rewardAmount")

    (
        _saveInit(true) ++
        _saveProxySecDepoPerEvent(proxySecDepoPerEvent_) ++
        _saveRewardTokenAddress(addressFromStringValue(rewardTokenAddress_)) ++
        _saveRewardAmount(rewardAmount_),
        unit
    )
}

@Callable(i)
func setActiveWitnesses(callerChainId_: Int, witnesses_: List[String]) = {
    strict err =
        _onlyThisContract(i.caller) &&
        _whenInitialized() &&
        _validatePublicKeys(witnesses_, "setActiveWitnesses: invalid witnesses")

    let epoch = _loadCurrentEpoch(callerChainId_)

    (
        _saveCurrentEpoch(callerChainId_, epoch + 1) ++
        _saveWitnesses(callerChainId_, epoch + 1, witnesses_),
        unit
    )
}

@Callable(i)
func submitWavesCallEvent(
    callerChainId_: Int,
    executionChainId_: Int,
    nonce_: Int,
    executionContract_: String,
    functionName_: String,
    args_: List[String],
    txHash_: String,
    blockNumber_: Int
) = {
    strict err =
        _validateInt(callerChainId_, 0, MAX_INT, "submitWavesCallEvent: invalid callerChainId") &&
        _validateInt(executionChainId_, 0, MAX_INT, "submitWavesCallEvent: invalid executionChainId") &&
        _validateInt(nonce_, 0, MAX_INT, "submitWavesCallEvent: invalid nonce") &&
        _validateString(executionContract_, "submitWavesCallEvent: invalid executionContract") &&
        _validateString(functionName_, "submitWavesCallEvent: invalid functionName") &&
        _validateArgs(args_, "submitWavesCallEvent: invalid args") &&
        _validateString(txHash_, "submitWavesCallEvent: invalid txHash") &&
        _validateInt(blockNumber_, 0, MAX_INT, "submitWavesCallEvent: invalid blockNumber")

    let proxySecDepo = _loadProxySecDepo(i.caller)
    let proxySecDepoPerEvent = _loadProxySecDepoPerEvent()
    let proxySecDepoUpdated = proxySecDepo - proxySecDepoPerEvent

    let event = (
        callerChainId_,
        executionChainId_,
        nonce_,
        executionContract_,
        functionName_,
        args_,
        txHash_,
        blockNumber_,
        "",
        0,
        0,
        proxySecDepoPerEvent,
        i.caller
    )

    let eventSize = _loadWavesEventSize()
    let eventHash = _calcWavesEventHash(event)
    let eventUpdated = _setWavesEventHash(event, eventHash)

    strict err1 =
        _wavesEventNotExist(eventHash, "submitWavesCallEvent: already exists") &&
        _validateInt(proxySecDepoUpdated, 0, MAX_INT, "submitWavesCallEvent: no security deposit")

    let callerIdxSize = _loadWavesEventCallerIdxSize(callerChainId_)

    (
        _saveProxySecDepo(i.caller, proxySecDepoUpdated) ++
        _saveWavesEvent(eventSize, eventUpdated) ++ 
        _saveWavesEventStatus(eventHash, EVENT_STATUS_PROCESSING) ++
        _saveWavesEventSize(eventSize + 1) ++
        _saveWavesEventCallerIdx(callerChainId_, callerIdxSize, eventSize) ++
        _saveWavesEventCallerIdxSize(callerChainId_, callerIdxSize + 1)
        , unit
    )
}

@Callable(i)
func submitEVMCallEvent(
    callerChainId_: Int,
    executionChainId_: Int,
    nonce_: Int,
    executionContract_: String,
    calldata_: String,
    txHash_: String,
    blockNumber_: Int
) = {
    strict err =
        _validateInt(callerChainId_, 0, MAX_INT, "submitEVMCallEvent: invalid callerChainId") &&
        _validateInt(executionChainId_, 0, MAX_INT, "submitEVMCallEvent: invalid executionChainId") &&
        _validateInt(nonce_, 0, MAX_INT, "submitEVMCallEvent: invalid nonce") &&
        _validateString(executionContract_, "submitEVMCallEvent: invalid executionContract") &&
        _validateString(calldata_, "submitEVMCallEvent: invalid calldata") &&
        _validateString(txHash_, "submitEVMCallEvent: invalid txHash") &&
        _validateInt(blockNumber_, 0, MAX_INT, "submitEVMCallEvent: invalid blockNumber")

    let proxySecDepo = _loadProxySecDepo(i.caller)
    let proxySecDepoPerEvent = _loadProxySecDepoPerEvent()
    let proxySecDepoUpdated = proxySecDepo - proxySecDepoPerEvent

    let event = (
        callerChainId_,
        executionChainId_,
        nonce_,
        executionContract_,
        calldata_,
        txHash_,
        blockNumber_,
        "",
        0,
        0,
        proxySecDepoPerEvent,
        i.caller
    )

    let eventSize = _loadEVMEventSize()
    let eventHash = _calcEVMEventHash(event)
    let eventUpdated = _setEVMEventHash(event, eventHash)

    strict err1 =
        _evmEventNotExist(eventHash, "submitEVMCallEvent: already exists") &&
        _validateInt(proxySecDepoUpdated, 0, MAX_INT, "submitEVMCallEvent: no security deposit")

    let callerIdxSize = _loadEVMEventCallerIdxSize(callerChainId_)

    (
        _saveProxySecDepo(i.caller, proxySecDepoUpdated) ++
        _saveEVMEvent(eventSize, eventUpdated) ++ 
        _saveEVMEventStatus(eventHash, EVENT_STATUS_PROCESSING) ++
        _saveEVMEventSize(eventSize + 1) ++
        _saveEVMEventCallerIdx(callerChainId_, callerIdxSize, eventSize) ++
        _saveEVMEventCallerIdxSize(callerChainId_, callerIdxSize + 1)
        , unit
    )
}

@Callable(i)
func publishWavesEventStatus(eventIdx_: Int, status_: Int) = {
    let eventSize = _loadWavesEventSize()
    let callerPublicKey = i.callerPublicKey.toBase58String()

    strict err =
        _validateEventIdx(eventIdx_, eventSize, "publishWavesEventStatus: invalid event idx") &&
        _validateEventStatus(status_, "publishWavesEventStatus: invalid status")

    let event = _loadWavesEvent(eventIdx_)
    let callerChainId = event._1
    let executionChainId = event._2
    let eventHash = event._9
    let eventConfirmations = event._10
    let eventTotal = event._11
    let proxySecDepo = event._12
    let proxy = event._13

    let epoch = _loadCurrentEpoch(callerChainId)
    let activeWitnesses = _loadWitnesses(callerChainId, epoch)

    strict err1 =
        _isActiveWitness(i.callerPublicKey.toBase58String(), activeWitnesses, "publishWavesEventStatus: invalid caller") &&
        _notConfirmedWavesEvent(eventHash, "publishWavesEventStatus: event already confirmed") &&
        _notPublishedWavesEventByWitness(callerPublicKey, eventIdx_, "publishWavesEventStatus: already published")

    let eventUpdated = 
        if status_ == EVENT_STATUS_CONFIRMED then
            _setWavesEventConfirmations(event, eventConfirmations + 1, eventTotal + 1)
        else if status_ == EVENT_STATUS_REJECTED then
            _setWavesEventConfirmations(event, eventConfirmations, eventTotal + 1)
        else throw("publishWavesEventStatus: incorrect status")

    let executorIdxSize = _loadWavesEventExecutorIdxSize(executionChainId)
    let finalization =
        if _isQuorumReached(eventUpdated._10, eventUpdated._11, activeWitnesses.size()) then
            let status = _getEventStatus(eventUpdated._10, eventUpdated._11, activeWitnesses.size())

            let proxySecDepoUpdated =
                if status == EVENT_STATUS_CONFIRMED then
                    _saveProxySecDepo(proxy, _loadProxySecDepo(proxy) + proxySecDepo)
                else if status == EVENT_STATUS_REJECTED then
                    [ScriptTransfer(_loadMultisig(), proxySecDepo, unit)]
                else []

            let rewardAddresses = proxy.toString() :: _publicKeysToAddrsStr(activeWitnesses)
            strict witnessesRewards = invoke(_loadRewardTokenAddress(), FUNC_MINT_MANY, [_loadRewardAmount(), rewardAddresses], [])

            proxySecDepoUpdated ++
            _saveWavesEventStatus(eventHash, status) ++
            _saveWavesEventExecutorIdx(executionChainId, executorIdxSize, eventIdx_) ++
            _saveWavesEventExecutorIdxSize(executionChainId, executorIdxSize + 1)
        else []

    (
        _saveWavesEvent(eventIdx_, eventUpdated) ++
        _savePublishedWavesEventByWitness(callerPublicKey, eventIdx_, status_) ++
        finalization, unit
    )
}

@Callable(i)
func publishEVMEventStatus(eventIdx_: Int, status_: Int) = {
    let eventSize = _loadEVMEventSize()
    let callerPublicKey = i.callerPublicKey.toBase58String()

    strict err =
        _validateEventIdx(eventIdx_, eventSize, "publishEVMEventStatus: invalid event idx") &&
        _validateEventStatus(status_, "publishEVMEventStatus: invalid status")

    let event = _loadEVMEvent(eventIdx_)
    let callerChainId = event._1
    let executionChainId = event._2
    let eventHash = event._8
    let eventConfirmations = event._9
    let eventTotal = event._10
    let proxySecDepo = event._11
    let proxy = event._12

    let epoch = _loadCurrentEpoch(callerChainId)
    let activeWitnesses = _loadWitnesses(callerChainId, epoch)

    strict err1 =
        _isActiveWitness(i.callerPublicKey.toBase58String(), activeWitnesses, "publishEVMEventStatus: invalid caller") &&
        _notConfirmedEVMEvent(eventHash, "publishEVMEventStatus: event already confirmed") &&
        _notPublishedEVMEventByWitness(callerPublicKey, eventIdx_, "publishEVMEventStatus: already published")

    let eventUpdated = 
        if status_ == EVENT_STATUS_CONFIRMED then
            _setEVMEventConfirmations(event, eventConfirmations + 1, eventTotal + 1)
        else if status_ == EVENT_STATUS_REJECTED then
            _setEVMEventConfirmations(event, eventConfirmations, eventTotal + 1)
        else throw("publishEVMEventStatus: incorrect status")

    let executorIdxSize = _loadEVMEventExecutorIdxSize(executionChainId)
    let finalization =
        if _isQuorumReached(eventUpdated._9, eventUpdated._10, activeWitnesses.size()) then
            let status = _getEventStatus(eventUpdated._9, eventUpdated._10, activeWitnesses.size())

            let proxySecDepoUpdated =
                if status == EVENT_STATUS_CONFIRMED then
                    _saveProxySecDepo(proxy, _loadProxySecDepo(proxy) + proxySecDepo)
                else if status == EVENT_STATUS_REJECTED then
                    [ScriptTransfer(_loadMultisig(), proxySecDepo, unit)]
                else []

            let rewardAddresses = proxy.toString() :: _publicKeysToAddrsStr(activeWitnesses)
            strict witnessesRewards = invoke(_loadRewardTokenAddress(), FUNC_MINT_MANY, [_loadRewardAmount(), rewardAddresses], [])

            proxySecDepoUpdated ++
            _saveEVMEventStatus(eventHash, status) ++
            _saveEVMEventExecutorIdx(executionChainId, executorIdxSize, eventIdx_) ++
            _saveEVMEventExecutorIdxSize(executionChainId, executorIdxSize + 1)
        else []

    (
        _saveEVMEvent(eventIdx_, eventUpdated) ++
        _savePublishedEVMEventByWitness(callerPublicKey, eventIdx_, status_) ++
        finalization, unit
    )
}

@Callable(i)
func addProxySecurityDeposit(recipient_: String) = {
    let recipient = if recipient_ == "" then i.caller.toString() else recipient_

    strict err =
        _validateAddress(recipient, "addProxySecurityDeposit: invalid recipient") &&
        _validatePaymentsSize(i.payments, 1, "addProxySecurityDeposit: no payment") &&
        _validatePaymentAsset(i.payments[0], unit, "addProxySecurityDeposit: invalid asset")

    let recipientAddr = addressFromStringValue(recipient)
    let balance = _loadProxySecDepo(recipientAddr)
    let updatedBalance = balance + i.payments[0].amount

    (_saveProxySecDepo(recipientAddr, updatedBalance), unit)
}

@Callable(i)
func subProxySecurityDeposit(amount_: Int) = {
    let balance = _loadProxySecDepo(i.caller)

    if balance < amount_ then
        throw("subProxySecurityDeposit: insufficient balance")
    else
    (
        _saveProxySecDepo(i.caller, balance - amount_) ++ 
        [ScriptTransfer(i.caller, amount_, unit)], unit
    )
}

@Callable(i)
func setMultisig(multisig_: String) = {
    strict err =
        _onlyThisContract(i.caller) &&
        _validateAddress(multisig_, "setMultisig: invalid multisig address")

    (_saveMultisig(addressFromStringValue(multisig_)), unit)
}

@Verifier(tx)
func verify() = {
    match getString(KEY_MULTISIG) {
        case multisig: String => 
            multisig
                .addressFromStringValue()
                .getBoolean(makeString([KEY_STATUS, this.toString(), tx.id.toBase58String()], SEPARATOR))
                .valueOrElse(false)
        case _ => sigVerify(tx.bodyBytes, tx.proofs[0], tx.senderPublicKey)
    }
}
